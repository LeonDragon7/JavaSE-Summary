package com.regexp;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
    分组、捕获、反向引用
    提出需求
    请看下面问题:
    给你一段文本,请你找出所有四个数字连在一起的子串，并且这四个数字要满足①第1位与第4位相同②第2位与第3位相同，比如1221 , 5775 ,...
    介绍
    (\\dd) (\\dd) 要解决前面的问题，我们需要了解正则表达式的几个概念;
    1.分组 我们可以用圆括号组成一个比较复杂的匹配模式,那么一个圆括号的部分我们可以看作是一个子表达式/一个分组。
    2.捕获 把正则表达式中子表达式/分组匹配的内容，保存到内存中以数字编号或显式命名的组里，方便后面引用，从左向右，以分组的左括号为标志,第一个出现的分组的组号为1,第二个为2，以此类推。组O代表的是整个正则式。
    3.反向引用 圆括号的内容被捕获后。可以在这个括号后被使用，从而写出一个比较实用的匹配模式，这个我们称为反向引用,这种引用既可以是在正则表达式内部，也可以是在正则表达式外部，内部反向引用\\分组号，外部反向引用$分组号。

    看几个小案例
    1.要匹配两个连续的相同数字:(\\d)\\1
    2.要匹配五个连续的相同数字:(\\d)\\1{4}
    3.要匹配个位与千位相同，十位与首位相同的数5225,1551 (\\d)(\\d)\\2\\1

    请在字符串中检索商品编号,形式如:12321-333999111 这样的号码,要求满足前面是一个五位数,然后一个-号,然后是一个九位数,连续的每三位要相同
 */
public class RegExp12 {
    public static void main(String[] args) {
        /**
         * 反向引用
         */
        String content = "h1234el9876lo33333 j12324-333999111a1551ck14 tom11 jack22 yyy12345 xxx";
        //要匹配两个连续的相同数字 :  (\\d)\\1
        //String regStr = "(\\d)\\1";
        //要匹配五个连续的相同数字： (\\d)\\1{4}
        //String regStr = "(\\d)\\1{4}";
        //要匹配个位与千位相同，十位与百位相同的数 5225 , 1551  (\\d)(\\d)\\2\\1
        //String regStr = "(\\d)(\\d)\\2\\1";

        /**
         * 请在字符串中检索商品编号,形式如:12321-333999111 这样的号码,
         * 要求满足前面是一个五位数,然后一个-号,然后是一个九位数,连续的每三位要相同
         */
        String regStr = "\\d{5}-(\\d)\\1{2}(\\d)\\2{2}(\\d)\\3{2}";
        Pattern pattern = Pattern.compile(regStr);
        Matcher matcher = pattern.matcher(content);
        while (matcher.find()) {
            System.out.println("找到 " + matcher.group(0));
        }
    }
}
